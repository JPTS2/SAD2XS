name: _Test Template

on:
  workflow_call:
    inputs:
      test_files:
        description: "Newline-separated list of test file paths (e.g. tests/test_001.py)"
        required: true
        type: string
      pull_tag:
        description: "Image tag to pull (e.g. latest or main)"
        required: false
        type: string
        default: latest

permissions:
  contents: read
  packages: read

concurrency:
  group: tests-${{ github.workflow }}-${{ github.ref }}-${{ inputs.pull_tag }}
  cancel-in-progress: true

jobs:
  discover:
    runs-on: ubuntu-24.04
    outputs:
      files: ${{ steps.collect.outputs.files }}
    steps:
      - name: Checkout main (for test paths)
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Normalize list into JSON
        id: collect
        shell: bash
        env:
          TEST_FILES_INPUT: ${{ inputs.test_files }}
        run: |
          FILES_JSON=$(python - <<'PY'
          import json, os
          data = os.environ["TEST_FILES_INPUT"].splitlines()
          files = [x.strip() for x in data if x.strip() and not x.strip().startswith("#")]
          print(json.dumps(files))
          PY
          )
          echo "files=${FILES_JSON}" >> "$GITHUB_OUTPUT"

  run:
    needs: [discover]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        test_file: ${{ fromJson(needs.discover.outputs.files) }}

    steps:
      - name: Checkout main (tests/config)
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Compute IMAGE env (lowercase owner)
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${OWNER_LC}/sad2xs-sad" >> "$GITHUB_ENV"
          echo "TAG=${{ inputs.pull_tag }}" >> "$GITHUB_ENV"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image (tag=${{ inputs.pull_tag }}, fallback to :main)
        id: pull
        run: |
          if docker pull "${IMAGE}:${TAG}"; then
            echo "image_ref=${IMAGE}:${TAG}" >> "$GITHUB_OUTPUT"
          else
            echo "Tag '${TAG}' not found; trying :main"
            docker pull "${IMAGE}:main"
            echo "image_ref=${IMAGE}:main" >> "$GITHUB_OUTPUT"
          fi

      - name: Pytest ${{ matrix.test_file }}
        env:
          SKIP_SMOKE: "1"   # skip entrypoint smoke
        run: |
          docker run --rm \
            -e SKIP_SMOKE \
            -v "$GITHUB_WORKSPACE":/work -w /work \
            "${{ steps.pull.outputs.image_ref }}" \
            pytest -q "${{ matrix.test_file }}"
